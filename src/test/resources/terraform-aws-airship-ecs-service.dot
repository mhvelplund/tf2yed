digraph {
	compound = "true"
	newrank = "true"
	subgraph "root" {
		"[root] aws_cloudwatch_event_rule.scheduled_task" [label = "aws_cloudwatch_event_rule.scheduled_task", shape = "box"]
		"[root] aws_cloudwatch_event_target.scheduled_task" [label = "aws_cloudwatch_event_target.scheduled_task", shape = "box"]
		"[root] aws_cloudwatch_log_group.app" [label = "aws_cloudwatch_log_group.app", shape = "box"]
		"[root] data.aws_caller_identity.current" [label = "data.aws_caller_identity.current", shape = "box"]
		"[root] data.aws_ecs_cluster.this" [label = "data.aws_ecs_cluster.this", shape = "box"]
		"[root] module.alb_handling.aws_lb_listener.nlb_listener" [label = "module.alb_handling.aws_lb_listener.nlb_listener", shape = "box"]
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing" [label = "module.alb_handling.aws_lb_listener_rule.host_based_routing", shape = "box"]
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host" [label = "module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host", shape = "box"]
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host_redirect_to_https" [label = "module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host_redirect_to_https", shape = "box"]
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_redirect_to_https" [label = "module.alb_handling.aws_lb_listener_rule.host_based_routing_redirect_to_https", shape = "box"]
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl" [label = "module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl", shape = "box"]
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth" [label = "module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth", shape = "box"]
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host" [label = "module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host", shape = "box"]
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host_cognito_auth" [label = "module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host_cognito_auth", shape = "box"]
		"[root] module.alb_handling.aws_lb_target_group.service" [label = "module.alb_handling.aws_lb_target_group.service", shape = "box"]
		"[root] module.alb_handling.aws_lb_target_group.service_nlb" [label = "module.alb_handling.aws_lb_target_group.service_nlb", shape = "box"]
		"[root] module.alb_handling.aws_route53_record.record" [label = "module.alb_handling.aws_route53_record.record", shape = "box"]
		"[root] module.alb_handling.aws_route53_record.record_alias_a" [label = "module.alb_handling.aws_route53_record.record_alias_a", shape = "box"]
		"[root] module.alb_handling.data.aws_lb.main" [label = "module.alb_handling.data.aws_lb.main", shape = "box"]
		"[root] module.alb_handling.data.template_file.custom_listen_host" [label = "module.alb_handling.data.template_file.custom_listen_host", shape = "box"]
		"[root] module.container_definition.null_resource.envvars_as_list_of_maps" [label = "module.container_definition.null_resource.envvars_as_list_of_maps", shape = "box"]
		"[root] module.container_definition.null_resource.secrets_as_list_of_maps" [label = "module.container_definition.null_resource.secrets_as_list_of_maps", shape = "box"]
		"[root] module.ecs_autoscaling.aws_appautoscaling_policy.policy" [label = "module.ecs_autoscaling.aws_appautoscaling_policy.policy", shape = "box"]
		"[root] module.ecs_autoscaling.aws_appautoscaling_target.target" [label = "module.ecs_autoscaling.aws_appautoscaling_target.target", shape = "box"]
		"[root] module.ecs_autoscaling.aws_cloudwatch_metric_alarm.alarm" [label = "module.ecs_autoscaling.aws_cloudwatch_metric_alarm.alarm", shape = "box"]
		"[root] module.ecs_service.aws_ecs_service.app" [label = "module.ecs_service.aws_ecs_service.app", shape = "box"]
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" [label = "module.ecs_service.aws_ecs_service.app_awsvpc", shape = "box"]
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" [label = "module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry", shape = "box"]
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" [label = "module.ecs_service.aws_ecs_service.app_with_lb", shape = "box"]
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" [label = "module.ecs_service.aws_ecs_service.app_with_lb_awsvpc", shape = "box"]
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" [label = "module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry", shape = "box"]
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" [label = "module.ecs_service.aws_ecs_service.app_with_lb_spread", shape = "box"]
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" [label = "module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry", shape = "box"]
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" [label = "module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry", shape = "box"]
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" [label = "module.ecs_service.aws_ecs_service.app_with_service_registry", shape = "box"]
		"[root] module.ecs_service.aws_service_discovery_service.service" [label = "module.ecs_service.aws_service_discovery_service.service", shape = "box"]
		"[root] module.ecs_service.null_resource.aws_lb_listener_rules" [label = "module.ecs_service.null_resource.aws_lb_listener_rules", shape = "box"]
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app" [label = "module.ecs_task_definition.aws_ecs_task_definition.app", shape = "box"]
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume" [label = "module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume", shape = "box"]
		"[root] module.ecs_task_definition_selector.data.aws_ecs_container_definition.current" [label = "module.ecs_task_definition_selector.data.aws_ecs_container_definition.current", shape = "box"]
		"[root] module.iam.aws_iam_role.ecs_task_execution_role" [label = "module.iam.aws_iam_role.ecs_task_execution_role", shape = "box"]
		"[root] module.iam.aws_iam_role.ecs_tasks_role" [label = "module.iam.aws_iam_role.ecs_tasks_role", shape = "box"]
		"[root] module.iam.aws_iam_role.lambda_ecs_task_scheduler" [label = "module.iam.aws_iam_role.lambda_ecs_task_scheduler", shape = "box"]
		"[root] module.iam.aws_iam_role.lambda_lookup" [label = "module.iam.aws_iam_role.lambda_lookup", shape = "box"]
		"[root] module.iam.aws_iam_role.scheduled_task_cloudwatch" [label = "module.iam.aws_iam_role.scheduled_task_cloudwatch", shape = "box"]
		"[root] module.iam.aws_iam_role_policy.kms_permissions" [label = "module.iam.aws_iam_role_policy.kms_permissions", shape = "box"]
		"[root] module.iam.aws_iam_role_policy.lambda_ecs_task_scheduler_policy" [label = "module.iam.aws_iam_role_policy.lambda_ecs_task_scheduler_policy", shape = "box"]
		"[root] module.iam.aws_iam_role_policy.lambda_lookup_policy" [label = "module.iam.aws_iam_role_policy.lambda_lookup_policy", shape = "box"]
		"[root] module.iam.aws_iam_role_policy.s3_ro_permissions" [label = "module.iam.aws_iam_role_policy.s3_ro_permissions", shape = "box"]
		"[root] module.iam.aws_iam_role_policy.s3_rw_permissions" [label = "module.iam.aws_iam_role_policy.s3_rw_permissions", shape = "box"]
		"[root] module.iam.aws_iam_role_policy.scheduled_task_cloudwatch_policy" [label = "module.iam.aws_iam_role_policy.scheduled_task_cloudwatch_policy", shape = "box"]
		"[root] module.iam.aws_iam_role_policy.ssm_permissions" [label = "module.iam.aws_iam_role_policy.ssm_permissions", shape = "box"]
		"[root] module.iam.aws_iam_role_policy.ssm_permissions_execution" [label = "module.iam.aws_iam_role_policy.ssm_permissions_execution", shape = "box"]
		"[root] module.iam.aws_iam_role_policy_attachment.ecs_tasks_execution_role" [label = "module.iam.aws_iam_role_policy_attachment.ecs_tasks_execution_role", shape = "box"]
		"[root] module.iam.data.aws_caller_identity.current" [label = "module.iam.data.aws_caller_identity.current", shape = "box"]
		"[root] module.iam.data.aws_iam_policy_document.ecs_task_assume_role" [label = "module.iam.data.aws_iam_policy_document.ecs_task_assume_role", shape = "box"]
		"[root] module.iam.data.aws_iam_policy_document.kms_permissions" [label = "module.iam.data.aws_iam_policy_document.kms_permissions", shape = "box"]
		"[root] module.iam.data.aws_iam_policy_document.lambda_ecs_task_scheduler_policy" [label = "module.iam.data.aws_iam_policy_document.lambda_ecs_task_scheduler_policy", shape = "box"]
		"[root] module.iam.data.aws_iam_policy_document.lambda_lookup_policy" [label = "module.iam.data.aws_iam_policy_document.lambda_lookup_policy", shape = "box"]
		"[root] module.iam.data.aws_iam_policy_document.lambda_trust_policy" [label = "module.iam.data.aws_iam_policy_document.lambda_trust_policy", shape = "box"]
		"[root] module.iam.data.aws_iam_policy_document.s3_ro_permissions" [label = "module.iam.data.aws_iam_policy_document.s3_ro_permissions", shape = "box"]
		"[root] module.iam.data.aws_iam_policy_document.s3_rw_permissions" [label = "module.iam.data.aws_iam_policy_document.s3_rw_permissions", shape = "box"]
		"[root] module.iam.data.aws_iam_policy_document.scheduled-task-cloudwatch-assume-role-policy" [label = "module.iam.data.aws_iam_policy_document.scheduled-task-cloudwatch-assume-role-policy", shape = "box"]
		"[root] module.iam.data.aws_iam_policy_document.scheduled_task_cloudwatch_policy" [label = "module.iam.data.aws_iam_policy_document.scheduled_task_cloudwatch_policy", shape = "box"]
		"[root] module.iam.data.aws_iam_policy_document.ssm_permissions" [label = "module.iam.data.aws_iam_policy_document.ssm_permissions", shape = "box"]
		"[root] module.lambda_ecs_task_scheduler.aws_cloudwatch_event_rule.schedule_expressions" [label = "module.lambda_ecs_task_scheduler.aws_cloudwatch_event_rule.schedule_expressions", shape = "box"]
		"[root] module.lambda_ecs_task_scheduler.aws_cloudwatch_event_target.call_task_runner_scheduler" [label = "module.lambda_ecs_task_scheduler.aws_cloudwatch_event_target.call_task_runner_scheduler", shape = "box"]
		"[root] module.lambda_ecs_task_scheduler.aws_lambda_function.lambda_task_runner" [label = "module.lambda_ecs_task_scheduler.aws_lambda_function.lambda_task_runner", shape = "box"]
		"[root] module.lambda_ecs_task_scheduler.aws_lambda_permission.allow_cloudwatch_to_call_task_runner" [label = "module.lambda_ecs_task_scheduler.aws_lambda_permission.allow_cloudwatch_to_call_task_runner", shape = "box"]
		"[root] module.lambda_ecs_task_scheduler.data.archive_file.ecs_task_scheduler_zip" [label = "module.lambda_ecs_task_scheduler.data.archive_file.ecs_task_scheduler_zip", shape = "box"]
		"[root] module.lambda_ecs_task_scheduler.data.template_file.task_defs" [label = "module.lambda_ecs_task_scheduler.data.template_file.task_defs", shape = "box"]
		"[root] module.live_task_lookup.aws_lambda_function.lambda_lookup" [label = "module.live_task_lookup.aws_lambda_function.lambda_lookup", shape = "box"]
		"[root] module.live_task_lookup.data.archive_file.lookup_zip" [label = "module.live_task_lookup.data.archive_file.lookup_zip", shape = "box"]
		"[root] module.live_task_lookup.data.aws_ecs_container_definition.lookup" [label = "module.live_task_lookup.data.aws_ecs_container_definition.lookup", shape = "box"]
		"[root] module.live_task_lookup.data.aws_ecs_service.lookup" [label = "module.live_task_lookup.data.aws_ecs_service.lookup", shape = "box"]
		"[root] module.live_task_lookup.data.aws_ecs_task_definition.lookup" [label = "module.live_task_lookup.data.aws_ecs_task_definition.lookup", shape = "box"]
		"[root] module.live_task_lookup.data.aws_lambda_invocation.lambda_lookup" [label = "module.live_task_lookup.data.aws_lambda_invocation.lambda_lookup", shape = "box"]
		"[root] module.live_task_lookup.null_resource.force_policy_dependency" [label = "module.live_task_lookup.null_resource.force_policy_dependency", shape = "box"]
		"[root] provider.archive" [label = "provider.archive", shape = "diamond"]
		"[root] provider.aws" [label = "provider.aws", shape = "diamond"]
		"[root] provider.null" [label = "provider.null", shape = "diamond"]
		"[root] provider.template" [label = "provider.template", shape = "diamond"]
		"[root] aws_cloudwatch_event_rule.scheduled_task" -> "[root] provider.aws"
		"[root] aws_cloudwatch_event_rule.scheduled_task" -> "[root] var.name"
		"[root] aws_cloudwatch_event_rule.scheduled_task" -> "[root] var.scheduled_task_expression"
		"[root] aws_cloudwatch_event_target.scheduled_task" -> "[root] aws_cloudwatch_event_rule.scheduled_task"
		"[root] aws_cloudwatch_event_target.scheduled_task" -> "[root] data.aws_caller_identity.current"
		"[root] aws_cloudwatch_event_target.scheduled_task" -> "[root] data.aws_ecs_cluster.this"
		"[root] aws_cloudwatch_event_target.scheduled_task" -> "[root] module.ecs_task_definition_selector.output.selected_task_definition_for_deployment"
		"[root] aws_cloudwatch_event_target.scheduled_task" -> "[root] module.iam.output.scheduled_task_cloudwatch_role_arn"
		"[root] aws_cloudwatch_event_target.scheduled_task" -> "[root] var.awsvpc_security_group_ids"
		"[root] aws_cloudwatch_event_target.scheduled_task" -> "[root] var.awsvpc_subnets"
		"[root] aws_cloudwatch_event_target.scheduled_task" -> "[root] var.scheduled_task_count"
		"[root] aws_cloudwatch_event_target.scheduled_task" -> "[root] var.scheduled_task_group"
		"[root] aws_cloudwatch_log_group.app" -> "[root] local.ecs_cluster_name"
		"[root] aws_cloudwatch_log_group.app" -> "[root] provider.aws"
		"[root] aws_cloudwatch_log_group.app" -> "[root] var.cloudwatch_kms_key"
		"[root] aws_cloudwatch_log_group.app" -> "[root] var.create"
		"[root] aws_cloudwatch_log_group.app" -> "[root] var.log_retention_in_days"
		"[root] aws_cloudwatch_log_group.app" -> "[root] var.name"
		"[root] data.aws_caller_identity.current" -> "[root] provider.aws"
		"[root] data.aws_ecs_cluster.this" -> "[root] provider.aws"
		"[root] data.aws_ecs_cluster.this" -> "[root] var.ecs_cluster_id"
		"[root] local.ecs_cluster_name" -> "[root] var.ecs_cluster_id"
		"[root] local.launch_type" -> "[root] var.fargate_enabled"
		"[root] local.name_map" -> "[root] local.ecs_cluster_name"
		"[root] local.name_map" -> "[root] var.name"
		"[root] local.tags" -> "[root] local.name_map"
		"[root] local.tags" -> "[root] var.tags"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] aws_cloudwatch_event_target.scheduled_task"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] local.tags"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alb_handling.aws_lb_listener.nlb_listener"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host_redirect_to_https"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_redirect_to_https"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.alb_handling.local.validate_load_balancing_type"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_autoscaling.aws_cloudwatch_metric_alarm.alarm"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_service.aws_ecs_service.app_with_service_registry"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_task_definition.output.aws_ecs_task_definition_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam.aws_iam_role_policy.kms_permissions"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam.aws_iam_role_policy.lambda_ecs_task_scheduler_policy"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam.aws_iam_role_policy.s3_ro_permissions"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam.aws_iam_role_policy.s3_rw_permissions"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam.aws_iam_role_policy.scheduled_task_cloudwatch_policy"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam.aws_iam_role_policy.ssm_permissions"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam.aws_iam_role_policy.ssm_permissions_execution"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam.aws_iam_role_policy_attachment.ecs_tasks_execution_role"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.iam.output.lambda_lookup_role_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_ecs_task_scheduler.aws_cloudwatch_event_target.call_task_runner_scheduler"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.lambda_ecs_task_scheduler.aws_lambda_permission.allow_cloudwatch_to_call_task_runner"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.live_task_lookup.local.test_lookup_type"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.aws_ecs_task_definition_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.aws_ecs_task_definition_family"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.ecs_taskrole_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.ecs_taskrole_name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.has_changed"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.lb_target_group_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.task_execution_role_arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.task_execution_role_name"
		"[root] module.alb_handling.aws_lb_listener.nlb_listener" -> "[root] module.alb_handling.aws_lb_target_group.service_nlb"
		"[root] module.alb_handling.aws_lb_listener.nlb_listener" -> "[root] module.alb_handling.var.lb_arn"
		"[root] module.alb_handling.aws_lb_listener.nlb_listener" -> "[root] module.alb_handling.var.nlb_listener_port"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing" -> "[root] module.alb_handling.aws_lb_target_group.service"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing" -> "[root] module.alb_handling.aws_route53_record.record"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing" -> "[root] module.alb_handling.aws_route53_record.record_alias_a"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing" -> "[root] module.alb_handling.local.route53_record_type"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing" -> "[root] module.alb_handling.var.lb_listener_arn"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing" -> "[root] module.alb_handling.var.redirect_http_to_https"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host" -> "[root] module.alb_handling.aws_lb_target_group.service"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host" -> "[root] module.alb_handling.data.template_file.custom_listen_host"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host" -> "[root] module.alb_handling.var.lb_listener_arn"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host" -> "[root] module.alb_handling.var.redirect_http_to_https"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host_redirect_to_https" -> "[root] module.alb_handling.data.template_file.custom_listen_host"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host_redirect_to_https" -> "[root] module.alb_handling.var.cognito_auth_enabled"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host_redirect_to_https" -> "[root] module.alb_handling.var.create"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host_redirect_to_https" -> "[root] module.alb_handling.var.lb_listener_arn"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host_redirect_to_https" -> "[root] module.alb_handling.var.load_balancing_type"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host_redirect_to_https" -> "[root] module.alb_handling.var.redirect_http_to_https"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host_redirect_to_https" -> "[root] provider.aws"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_redirect_to_https" -> "[root] module.alb_handling.aws_route53_record.record"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_redirect_to_https" -> "[root] module.alb_handling.aws_route53_record.record_alias_a"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_redirect_to_https" -> "[root] module.alb_handling.local.route53_record_type"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_redirect_to_https" -> "[root] module.alb_handling.var.lb_listener_arn"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_redirect_to_https" -> "[root] module.alb_handling.var.load_balancing_type"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_redirect_to_https" -> "[root] module.alb_handling.var.redirect_http_to_https"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl" -> "[root] module.alb_handling.aws_lb_target_group.service"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl" -> "[root] module.alb_handling.aws_route53_record.record"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl" -> "[root] module.alb_handling.aws_route53_record.record_alias_a"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl" -> "[root] module.alb_handling.local.route53_record_type"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl" -> "[root] module.alb_handling.var.cognito_auth_enabled"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl" -> "[root] module.alb_handling.var.https_enabled"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl" -> "[root] module.alb_handling.var.lb_listener_arn_https"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth" -> "[root] module.alb_handling.aws_lb_target_group.service"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth" -> "[root] module.alb_handling.aws_route53_record.record"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth" -> "[root] module.alb_handling.aws_route53_record.record_alias_a"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth" -> "[root] module.alb_handling.local.route53_record_type"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth" -> "[root] module.alb_handling.var.cognito_auth_enabled"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth" -> "[root] module.alb_handling.var.cognito_user_pool_arn"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth" -> "[root] module.alb_handling.var.cognito_user_pool_client_id"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth" -> "[root] module.alb_handling.var.cognito_user_pool_domain"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth" -> "[root] module.alb_handling.var.https_enabled"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth" -> "[root] module.alb_handling.var.lb_listener_arn_https"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host" -> "[root] module.alb_handling.aws_lb_target_group.service"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host" -> "[root] module.alb_handling.data.template_file.custom_listen_host"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host" -> "[root] module.alb_handling.var.cognito_auth_enabled"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host" -> "[root] module.alb_handling.var.https_enabled"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host" -> "[root] module.alb_handling.var.lb_listener_arn_https"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host_cognito_auth" -> "[root] module.alb_handling.aws_lb_target_group.service"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host_cognito_auth" -> "[root] module.alb_handling.data.template_file.custom_listen_host"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host_cognito_auth" -> "[root] module.alb_handling.var.cognito_auth_enabled"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host_cognito_auth" -> "[root] module.alb_handling.var.cognito_user_pool_arn"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host_cognito_auth" -> "[root] module.alb_handling.var.cognito_user_pool_client_id"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host_cognito_auth" -> "[root] module.alb_handling.var.cognito_user_pool_domain"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host_cognito_auth" -> "[root] module.alb_handling.var.https_enabled"
		"[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host_cognito_auth" -> "[root] module.alb_handling.var.lb_listener_arn_https"
		"[root] module.alb_handling.aws_lb_target_group.service" -> "[root] module.alb_handling.local.tg_name"
		"[root] module.alb_handling.aws_lb_target_group.service" -> "[root] module.alb_handling.var.create"
		"[root] module.alb_handling.aws_lb_target_group.service" -> "[root] module.alb_handling.var.deregistration_delay"
		"[root] module.alb_handling.aws_lb_target_group.service" -> "[root] module.alb_handling.var.health_matcher"
		"[root] module.alb_handling.aws_lb_target_group.service" -> "[root] module.alb_handling.var.health_uri"
		"[root] module.alb_handling.aws_lb_target_group.service" -> "[root] module.alb_handling.var.healthy_threshold"
		"[root] module.alb_handling.aws_lb_target_group.service" -> "[root] module.alb_handling.var.lb_vpc_id"
		"[root] module.alb_handling.aws_lb_target_group.service" -> "[root] module.alb_handling.var.load_balancing_type"
		"[root] module.alb_handling.aws_lb_target_group.service" -> "[root] module.alb_handling.var.target_group_port"
		"[root] module.alb_handling.aws_lb_target_group.service" -> "[root] module.alb_handling.var.target_type"
		"[root] module.alb_handling.aws_lb_target_group.service" -> "[root] module.alb_handling.var.unhealthy_threshold"
		"[root] module.alb_handling.aws_lb_target_group.service" -> "[root] provider.aws"
		"[root] module.alb_handling.aws_lb_target_group.service_nlb" -> "[root] module.alb_handling.local.tags"
		"[root] module.alb_handling.aws_lb_target_group.service_nlb" -> "[root] module.alb_handling.local.tg_name"
		"[root] module.alb_handling.aws_lb_target_group.service_nlb" -> "[root] module.alb_handling.var.create"
		"[root] module.alb_handling.aws_lb_target_group.service_nlb" -> "[root] module.alb_handling.var.deregistration_delay"
		"[root] module.alb_handling.aws_lb_target_group.service_nlb" -> "[root] module.alb_handling.var.healthy_threshold"
		"[root] module.alb_handling.aws_lb_target_group.service_nlb" -> "[root] module.alb_handling.var.lb_vpc_id"
		"[root] module.alb_handling.aws_lb_target_group.service_nlb" -> "[root] module.alb_handling.var.load_balancing_type"
		"[root] module.alb_handling.aws_lb_target_group.service_nlb" -> "[root] module.alb_handling.var.target_group_port"
		"[root] module.alb_handling.aws_lb_target_group.service_nlb" -> "[root] module.alb_handling.var.target_type"
		"[root] module.alb_handling.aws_lb_target_group.service_nlb" -> "[root] module.alb_handling.var.unhealthy_threshold"
		"[root] module.alb_handling.aws_lb_target_group.service_nlb" -> "[root] provider.aws"
		"[root] module.alb_handling.aws_route53_record.record" -> "[root] module.alb_handling.data.aws_lb.main"
		"[root] module.alb_handling.aws_route53_record.record" -> "[root] module.alb_handling.var.route53_name"
		"[root] module.alb_handling.aws_route53_record.record" -> "[root] module.alb_handling.var.route53_zone_id"
		"[root] module.alb_handling.aws_route53_record.record_alias_a" -> "[root] module.alb_handling.data.aws_lb.main"
		"[root] module.alb_handling.aws_route53_record.record_alias_a" -> "[root] module.alb_handling.var.route53_name"
		"[root] module.alb_handling.aws_route53_record.record_alias_a" -> "[root] module.alb_handling.var.route53_record_identifier"
		"[root] module.alb_handling.aws_route53_record.record_alias_a" -> "[root] module.alb_handling.var.route53_zone_id"
		"[root] module.alb_handling.data.aws_lb.main" -> "[root] module.alb_handling.var.create"
		"[root] module.alb_handling.data.aws_lb.main" -> "[root] module.alb_handling.var.lb_arn"
		"[root] module.alb_handling.data.aws_lb.main" -> "[root] module.alb_handling.var.route53_record_type"
		"[root] module.alb_handling.data.aws_lb.main" -> "[root] provider.aws"
		"[root] module.alb_handling.data.template_file.custom_listen_host" -> "[root] module.alb_handling.var.custom_listen_hosts"
		"[root] module.alb_handling.data.template_file.custom_listen_host" -> "[root] module.alb_handling.var.custom_listen_hosts_count"
		"[root] module.alb_handling.data.template_file.custom_listen_host" -> "[root] provider.template"
		"[root] module.alb_handling.local.name_map" -> "[root] module.alb_handling.var.name"
		"[root] module.alb_handling.local.route53_record_type" -> "[root] module.alb_handling.var.allowed_record_types"
		"[root] module.alb_handling.local.route53_record_type" -> "[root] module.alb_handling.var.route53_record_type"
		"[root] module.alb_handling.local.tags" -> "[root] module.alb_handling.local.name_map"
		"[root] module.alb_handling.local.tags" -> "[root] module.alb_handling.var.tags"
		"[root] module.alb_handling.local.tg_name" -> "[root] module.alb_handling.var.cluster_name"
		"[root] module.alb_handling.local.tg_name" -> "[root] module.alb_handling.var.name"
		"[root] module.alb_handling.local.validate_load_balancing_type" -> "[root] module.alb_handling.var.allowed_load_balancing_types"
		"[root] module.alb_handling.local.validate_load_balancing_type" -> "[root] module.alb_handling.var.load_balancing_type"
		"[root] module.alb_handling.output.aws_lb_listener_rules" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing"
		"[root] module.alb_handling.output.aws_lb_listener_rules" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host"
		"[root] module.alb_handling.output.aws_lb_listener_rules" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host_cognito_auth"
		"[root] module.alb_handling.output.lb_target_group_arn" -> "[root] module.alb_handling.aws_lb_target_group.service"
		"[root] module.alb_handling.output.lb_target_group_arn" -> "[root] module.alb_handling.aws_lb_target_group.service_nlb"
		"[root] module.alb_handling.var.cluster_name" -> "[root] local.ecs_cluster_name"
		"[root] module.alb_handling.var.cognito_auth_enabled" -> "[root] var.load_balancing_properties_cognito_auth_enabled"
		"[root] module.alb_handling.var.cognito_user_pool_arn" -> "[root] var.load_balancing_properties_cognito_user_pool_arn"
		"[root] module.alb_handling.var.cognito_user_pool_client_id" -> "[root] var.load_balancing_properties_cognito_user_pool_client_id"
		"[root] module.alb_handling.var.cognito_user_pool_domain" -> "[root] var.load_balancing_properties_cognito_user_pool_domain"
		"[root] module.alb_handling.var.create" -> "[root] var.create"
		"[root] module.alb_handling.var.create" -> "[root] var.load_balancing_type"
		"[root] module.alb_handling.var.custom_listen_hosts" -> "[root] var.load_balancing_properties_custom_listen_hosts"
		"[root] module.alb_handling.var.custom_listen_hosts_count" -> "[root] var.load_balancing_properties_custom_listen_hosts_count"
		"[root] module.alb_handling.var.deregistration_delay" -> "[root] var.load_balancing_properties_deregistration_delay"
		"[root] module.alb_handling.var.health_matcher" -> "[root] var.load_balancing_properties_health_matcher"
		"[root] module.alb_handling.var.health_uri" -> "[root] var.load_balancing_properties_health_uri"
		"[root] module.alb_handling.var.healthy_threshold" -> "[root] var.load_balancing_properties_healthy_threshold"
		"[root] module.alb_handling.var.https_enabled" -> "[root] var.load_balancing_properties_https_enabled"
		"[root] module.alb_handling.var.lb_arn" -> "[root] var.load_balancing_properties_lb_arn"
		"[root] module.alb_handling.var.lb_listener_arn" -> "[root] var.load_balancing_properties_lb_listener_arn"
		"[root] module.alb_handling.var.lb_listener_arn_https" -> "[root] var.load_balancing_properties_lb_listener_arn_https"
		"[root] module.alb_handling.var.lb_vpc_id" -> "[root] var.load_balancing_properties_lb_vpc_id"
		"[root] module.alb_handling.var.load_balancing_type" -> "[root] var.load_balancing_type"
		"[root] module.alb_handling.var.name" -> "[root] var.name"
		"[root] module.alb_handling.var.nlb_listener_port" -> "[root] var.load_balancing_properties_nlb_listener_port"
		"[root] module.alb_handling.var.redirect_http_to_https" -> "[root] var.load_balancing_properties_redirect_http_to_https"
		"[root] module.alb_handling.var.route53_name" -> "[root] var.load_balancing_properties_route53_custom_name"
		"[root] module.alb_handling.var.route53_name" -> "[root] var.name"
		"[root] module.alb_handling.var.route53_record_identifier" -> "[root] var.load_balancing_properties_route53_record_identifier"
		"[root] module.alb_handling.var.route53_record_type" -> "[root] var.is_scheduled_task"
		"[root] module.alb_handling.var.route53_record_type" -> "[root] var.load_balancing_properties_route53_record_type"
		"[root] module.alb_handling.var.route53_zone_id" -> "[root] var.load_balancing_properties_route53_zone_id"
		"[root] module.alb_handling.var.target_group_port" -> "[root] var.load_balancing_properties_target_group_port"
		"[root] module.alb_handling.var.target_type" -> "[root] var.awsvpc_enabled"
		"[root] module.alb_handling.var.unhealthy_threshold" -> "[root] var.load_balancing_properties_unhealthy_threshold"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.local.docker_labels"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.local.port_mappings"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.local.repository_credentials"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.local.ulimits"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.local.use_credentials"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.local.use_port"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.local.use_ulimits"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.null_resource.envvars_as_list_of_maps"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.null_resource.secrets_as_list_of_maps"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.container_command"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.container_cpu"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.container_image"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.container_init_process_enabled"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.container_memory"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.container_memory_reservation"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.container_name"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.entrypoint"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.essential"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.healthcheck"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.hostname"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.log_driver"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.log_options"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.mountpoints"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.privileged"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.readonly_root_filesystem"
		"[root] module.container_definition.local.container_definitions" -> "[root] module.container_definition.var.working_directory"
		"[root] module.container_definition.local.docker_label_merge" -> "[root] module.container_definition.var.container_docker_labels"
		"[root] module.container_definition.local.docker_labels" -> "[root] module.container_definition.local.docker_label_merge"
		"[root] module.container_definition.local.docker_labels" -> "[root] module.container_definition.local.secrets_merge"
		"[root] module.container_definition.local.port_mappings" -> "[root] module.container_definition.var.container_port"
		"[root] module.container_definition.local.port_mappings" -> "[root] module.container_definition.var.host_port"
		"[root] module.container_definition.local.port_mappings" -> "[root] module.container_definition.var.protocol"
		"[root] module.container_definition.local.repository_credentials" -> "[root] module.container_definition.var.repository_credentials_secret_arn"
		"[root] module.container_definition.local.secrets_merge" -> "[root] module.container_definition.var.container_secrets"
		"[root] module.container_definition.local.ulimits" -> "[root] module.container_definition.var.ulimit_hard_limit"
		"[root] module.container_definition.local.ulimits" -> "[root] module.container_definition.var.ulimit_name"
		"[root] module.container_definition.local.ulimits" -> "[root] module.container_definition.var.ulimit_soft_limit"
		"[root] module.container_definition.local.use_credentials" -> "[root] module.container_definition.var.repository_credentials_secret_arn"
		"[root] module.container_definition.local.use_port" -> "[root] module.container_definition.var.container_port"
		"[root] module.container_definition.local.use_ulimits" -> "[root] module.container_definition.var.ulimit_hard_limit"
		"[root] module.container_definition.local.use_ulimits" -> "[root] module.container_definition.var.ulimit_soft_limit"
		"[root] module.container_definition.null_resource.envvars_as_list_of_maps" -> "[root] module.container_definition.local.safe_search_replace_string"
		"[root] module.container_definition.null_resource.envvars_as_list_of_maps" -> "[root] module.container_definition.var.container_envvars"
		"[root] module.container_definition.null_resource.envvars_as_list_of_maps" -> "[root] provider.null"
		"[root] module.container_definition.null_resource.secrets_as_list_of_maps" -> "[root] module.container_definition.local.safe_search_replace_string"
		"[root] module.container_definition.null_resource.secrets_as_list_of_maps" -> "[root] module.container_definition.var.container_secrets"
		"[root] module.container_definition.null_resource.secrets_as_list_of_maps" -> "[root] provider.null"
		"[root] module.container_definition.output.json" -> "[root] module.container_definition.local.container_definitions"
		"[root] module.container_definition.var.container_command" -> "[root] var.container_command"
		"[root] module.container_definition.var.container_cpu" -> "[root] var.container_cpu"
		"[root] module.container_definition.var.container_docker_labels" -> "[root] var.container_docker_labels"
		"[root] module.container_definition.var.container_envvars" -> "[root] var.container_envvars"
		"[root] module.container_definition.var.container_image" -> "[root] module.live_task_lookup.output.image"
		"[root] module.container_definition.var.container_image" -> "[root] var.bootstrap_container_image"
		"[root] module.container_definition.var.container_image" -> "[root] var.force_bootstrap_container_image"
		"[root] module.container_definition.var.container_init_process_enabled" -> "[root] var.container_init_process_enabled"
		"[root] module.container_definition.var.container_memory" -> "[root] var.container_memory"
		"[root] module.container_definition.var.container_memory_reservation" -> "[root] var.container_memory_reservation"
		"[root] module.container_definition.var.container_name" -> "[root] var.container_name"
		"[root] module.container_definition.var.container_port" -> "[root] var.container_port"
		"[root] module.container_definition.var.container_secrets" -> "[root] var.container_secrets"
		"[root] module.container_definition.var.healthcheck" -> "[root] var.container_healthcheck"
		"[root] module.container_definition.var.host_port" -> "[root] var.awsvpc_enabled"
		"[root] module.container_definition.var.host_port" -> "[root] var.container_port"
		"[root] module.container_definition.var.host_port" -> "[root] var.host_port"
		"[root] module.container_definition.var.hostname" -> "[root] var.awsvpc_enabled"
		"[root] module.container_definition.var.hostname" -> "[root] var.name"
		"[root] module.container_definition.var.log_options" -> "[root] aws_cloudwatch_log_group.app"
		"[root] module.container_definition.var.log_options" -> "[root] var.region"
		"[root] module.container_definition.var.mountpoints" -> "[root] var.mountpoints"
		"[root] module.container_definition.var.repository_credentials_secret_arn" -> "[root] var.repository_credentials_secret_arn"
		"[root] module.container_definition.var.ulimit_hard_limit" -> "[root] var.container_ulimit_hard_limit"
		"[root] module.container_definition.var.ulimit_name" -> "[root] var.container_ulimit_name"
		"[root] module.container_definition.var.ulimit_soft_limit" -> "[root] var.container_ulimit_soft_limit"
		"[root] module.ecs_autoscaling.aws_appautoscaling_policy.policy" -> "[root] module.ecs_autoscaling.aws_appautoscaling_target.target"
		"[root] module.ecs_autoscaling.aws_appautoscaling_policy.policy" -> "[root] module.ecs_autoscaling.local.cluster_plus_service_name"
		"[root] module.ecs_autoscaling.aws_appautoscaling_policy.policy" -> "[root] module.ecs_autoscaling.var.direction"
		"[root] module.ecs_autoscaling.aws_appautoscaling_policy.policy" -> "[root] module.ecs_autoscaling.var.scaling_properties"
		"[root] module.ecs_autoscaling.aws_appautoscaling_target.target" -> "[root] module.ecs_autoscaling.var.cluster_name"
		"[root] module.ecs_autoscaling.aws_appautoscaling_target.target" -> "[root] module.ecs_autoscaling.var.create"
		"[root] module.ecs_autoscaling.aws_appautoscaling_target.target" -> "[root] module.ecs_autoscaling.var.desired_max_capacity"
		"[root] module.ecs_autoscaling.aws_appautoscaling_target.target" -> "[root] module.ecs_autoscaling.var.desired_min_capacity"
		"[root] module.ecs_autoscaling.aws_appautoscaling_target.target" -> "[root] module.ecs_autoscaling.var.ecs_service_name"
		"[root] module.ecs_autoscaling.aws_cloudwatch_metric_alarm.alarm" -> "[root] module.ecs_autoscaling.aws_appautoscaling_policy.policy"
		"[root] module.ecs_autoscaling.local.cluster_plus_service_name" -> "[root] module.ecs_autoscaling.var.cluster_name"
		"[root] module.ecs_autoscaling.local.cluster_plus_service_name" -> "[root] module.ecs_autoscaling.var.ecs_service_name"
		"[root] module.ecs_autoscaling.var.cluster_name" -> "[root] local.ecs_cluster_name"
		"[root] module.ecs_autoscaling.var.create" -> "[root] var.create"
		"[root] module.ecs_autoscaling.var.create" -> "[root] var.is_scheduled_task"
		"[root] module.ecs_autoscaling.var.create" -> "[root] var.scaling_properties"
		"[root] module.ecs_autoscaling.var.desired_max_capacity" -> "[root] var.capacity_properties_desired_max_capacity"
		"[root] module.ecs_autoscaling.var.desired_min_capacity" -> "[root] var.capacity_properties_desired_min_capacity"
		"[root] module.ecs_autoscaling.var.ecs_service_name" -> "[root] module.ecs_service.output.ecs_service_name"
		"[root] module.ecs_autoscaling.var.scaling_properties" -> "[root] var.scaling_properties"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.local.lb_attached"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.var.awsvpc_enabled"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.var.cluster_id"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.var.create"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.var.deployment_controller_type"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.var.deployment_maximum_percent"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.var.deployment_minimum_healthy_percent"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.var.desired_capacity"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.var.launch_type"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.var.name"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.var.scheduling_strategy"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.var.selected_task_definition"
		"[root] module.ecs_service.aws_ecs_service.app" -> "[root] module.ecs_service.var.service_discovery_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.local.lb_attached"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.awsvpc_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.awsvpc_security_group_ids"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.awsvpc_subnets"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.cluster_id"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.create"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.deployment_controller_type"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.deployment_maximum_percent"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.deployment_minimum_healthy_percent"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.desired_capacity"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.launch_type"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.name"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.scheduling_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.selected_task_definition"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc" -> "[root] module.ecs_service.var.service_discovery_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.aws_service_discovery_service.service"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.local.lb_attached"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.local.service_registries_container_port"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.awsvpc_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.awsvpc_security_group_ids"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.awsvpc_subnets"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.cluster_id"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.container_name"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.deployment_controller_type"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.deployment_maximum_percent"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.deployment_minimum_healthy_percent"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.desired_capacity"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.launch_type"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.scheduling_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.selected_task_definition"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.local.lb_attached"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.null_resource.aws_lb_listener_rules"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.awsvpc_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.cluster_id"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.container_name"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.container_port"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.deployment_controller_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.deployment_maximum_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.deployment_minimum_healthy_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.desired_capacity"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.health_check_grace_period_seconds"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.launch_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.lb_target_group_arn"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.name"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.scheduling_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.selected_task_definition"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.service_discovery_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb" -> "[root] module.ecs_service.var.with_placement_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.local.lb_attached"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.null_resource.aws_lb_listener_rules"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.awsvpc_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.awsvpc_security_group_ids"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.awsvpc_subnets"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.cluster_id"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.container_name"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.container_port"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.deployment_controller_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.deployment_maximum_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.deployment_minimum_healthy_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.desired_capacity"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.health_check_grace_period_seconds"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.launch_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.lb_target_group_arn"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.name"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.scheduling_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.selected_task_definition"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc" -> "[root] module.ecs_service.var.service_discovery_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.aws_service_discovery_service.service"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.local.lb_attached"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.local.service_registries_container_port"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.null_resource.aws_lb_listener_rules"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.awsvpc_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.awsvpc_security_group_ids"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.awsvpc_subnets"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.cluster_id"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.container_name"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.deployment_controller_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.deployment_maximum_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.deployment_minimum_healthy_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.desired_capacity"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.launch_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.lb_target_group_arn"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.scheduling_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry" -> "[root] module.ecs_service.var.selected_task_definition"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.local.lb_attached"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.null_resource.aws_lb_listener_rules"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.awsvpc_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.cluster_id"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.container_name"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.container_port"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.deployment_controller_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.deployment_maximum_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.deployment_minimum_healthy_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.desired_capacity"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.health_check_grace_period_seconds"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.launch_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.lb_target_group_arn"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.name"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.scheduling_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.selected_task_definition"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.service_discovery_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread" -> "[root] module.ecs_service.var.with_placement_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.aws_service_discovery_service.service"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.local.lb_attached"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.local.service_registries_container_port"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.null_resource.aws_lb_listener_rules"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.var.awsvpc_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.var.cluster_id"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.var.container_name"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.var.deployment_controller_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.var.deployment_maximum_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.var.deployment_minimum_healthy_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.var.desired_capacity"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.var.launch_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.var.lb_target_group_arn"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.var.scheduling_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.var.selected_task_definition"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry" -> "[root] module.ecs_service.var.with_placement_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.aws_service_discovery_service.service"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.local.lb_attached"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.local.service_registries_container_port"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.null_resource.aws_lb_listener_rules"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.var.awsvpc_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.var.cluster_id"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.var.container_name"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.var.deployment_controller_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.var.deployment_maximum_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.var.deployment_minimum_healthy_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.var.desired_capacity"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.var.launch_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.var.lb_target_group_arn"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.var.scheduling_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.var.selected_task_definition"
		"[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry" -> "[root] module.ecs_service.var.with_placement_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.aws_service_discovery_service.service"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.local.lb_attached"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.local.service_registries_container_port"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.var.awsvpc_enabled"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.var.cluster_id"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.var.container_name"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.var.deployment_controller_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.var.deployment_maximum_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.var.deployment_minimum_healthy_percent"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.var.desired_capacity"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.var.launch_type"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.var.scheduling_strategy"
		"[root] module.ecs_service.aws_ecs_service.app_with_service_registry" -> "[root] module.ecs_service.var.selected_task_definition"
		"[root] module.ecs_service.aws_service_discovery_service.service" -> "[root] module.ecs_service.var.create"
		"[root] module.ecs_service.aws_service_discovery_service.service" -> "[root] module.ecs_service.var.name"
		"[root] module.ecs_service.aws_service_discovery_service.service" -> "[root] module.ecs_service.var.service_discovery_dns_ttl"
		"[root] module.ecs_service.aws_service_discovery_service.service" -> "[root] module.ecs_service.var.service_discovery_dns_type"
		"[root] module.ecs_service.aws_service_discovery_service.service" -> "[root] module.ecs_service.var.service_discovery_enabled"
		"[root] module.ecs_service.aws_service_discovery_service.service" -> "[root] module.ecs_service.var.service_discovery_healthcheck_custom_failure_threshold"
		"[root] module.ecs_service.aws_service_discovery_service.service" -> "[root] module.ecs_service.var.service_discovery_namespace_id"
		"[root] module.ecs_service.aws_service_discovery_service.service" -> "[root] module.ecs_service.var.service_discovery_routing_policy"
		"[root] module.ecs_service.aws_service_discovery_service.service" -> "[root] provider.aws"
		"[root] module.ecs_service.local.lb_attached" -> "[root] module.ecs_service.var.load_balancing_type"
		"[root] module.ecs_service.local.service_registries_container_port" -> "[root] module.ecs_service.var.container_port"
		"[root] module.ecs_service.null_resource.aws_lb_listener_rules" -> "[root] module.ecs_service.var.aws_lb_listener_rules"
		"[root] module.ecs_service.null_resource.aws_lb_listener_rules" -> "[root] module.ecs_service.var.create"
		"[root] module.ecs_service.null_resource.aws_lb_listener_rules" -> "[root] provider.null"
		"[root] module.ecs_service.output.ecs_service_name" -> "[root] module.ecs_service.aws_ecs_service.app"
		"[root] module.ecs_service.output.ecs_service_name" -> "[root] module.ecs_service.aws_ecs_service.app_awsvpc"
		"[root] module.ecs_service.output.ecs_service_name" -> "[root] module.ecs_service.aws_ecs_service.app_awsvpc_with_service_registry"
		"[root] module.ecs_service.output.ecs_service_name" -> "[root] module.ecs_service.aws_ecs_service.app_with_lb"
		"[root] module.ecs_service.output.ecs_service_name" -> "[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc"
		"[root] module.ecs_service.output.ecs_service_name" -> "[root] module.ecs_service.aws_ecs_service.app_with_lb_awsvpc_with_service_registry"
		"[root] module.ecs_service.output.ecs_service_name" -> "[root] module.ecs_service.aws_ecs_service.app_with_lb_spread"
		"[root] module.ecs_service.output.ecs_service_name" -> "[root] module.ecs_service.aws_ecs_service.app_with_lb_spread_with_service_registry"
		"[root] module.ecs_service.output.ecs_service_name" -> "[root] module.ecs_service.aws_ecs_service.app_with_lb_with_service_registry"
		"[root] module.ecs_service.var.aws_lb_listener_rules" -> "[root] module.alb_handling.output.aws_lb_listener_rules"
		"[root] module.ecs_service.var.awsvpc_enabled" -> "[root] var.awsvpc_enabled"
		"[root] module.ecs_service.var.awsvpc_security_group_ids" -> "[root] var.awsvpc_security_group_ids"
		"[root] module.ecs_service.var.awsvpc_subnets" -> "[root] var.awsvpc_subnets"
		"[root] module.ecs_service.var.cluster_id" -> "[root] var.ecs_cluster_id"
		"[root] module.ecs_service.var.container_name" -> "[root] var.container_name"
		"[root] module.ecs_service.var.container_port" -> "[root] var.container_port"
		"[root] module.ecs_service.var.create" -> "[root] var.create"
		"[root] module.ecs_service.var.create" -> "[root] var.is_scheduled_task"
		"[root] module.ecs_service.var.deployment_controller_type" -> "[root] var.deployment_controller_type"
		"[root] module.ecs_service.var.deployment_maximum_percent" -> "[root] var.capacity_properties_deployment_maximum_percent"
		"[root] module.ecs_service.var.deployment_minimum_healthy_percent" -> "[root] var.capacity_properties_deployment_minimum_healthy_percent"
		"[root] module.ecs_service.var.desired_capacity" -> "[root] var.capacity_properties_desired_capacity"
		"[root] module.ecs_service.var.health_check_grace_period_seconds" -> "[root] var.health_check_grace_period_seconds"
		"[root] module.ecs_service.var.launch_type" -> "[root] local.launch_type"
		"[root] module.ecs_service.var.lb_target_group_arn" -> "[root] module.alb_handling.output.lb_target_group_arn"
		"[root] module.ecs_service.var.load_balancing_type" -> "[root] var.load_balancing_type"
		"[root] module.ecs_service.var.name" -> "[root] var.name"
		"[root] module.ecs_service.var.scheduling_strategy" -> "[root] var.scheduling_strategy"
		"[root] module.ecs_service.var.selected_task_definition" -> "[root] module.ecs_task_definition_selector.output.selected_task_definition_for_deployment"
		"[root] module.ecs_service.var.service_discovery_dns_ttl" -> "[root] var.service_discovery_properties_dns_ttl"
		"[root] module.ecs_service.var.service_discovery_dns_type" -> "[root] var.service_discovery_properties_dns_type"
		"[root] module.ecs_service.var.service_discovery_enabled" -> "[root] var.service_discovery_enabled"
		"[root] module.ecs_service.var.service_discovery_healthcheck_custom_failure_threshold" -> "[root] var.service_discovery_properties_healthcheck_custom_failure_threshold"
		"[root] module.ecs_service.var.service_discovery_namespace_id" -> "[root] var.service_discovery_properties_namespace_id"
		"[root] module.ecs_service.var.service_discovery_routing_policy" -> "[root] var.service_discovery_properties_routing_policy"
		"[root] module.ecs_service.var.with_placement_strategy" -> "[root] var.with_placement_strategy"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app" -> "[root] module.ecs_task_definition.local.docker_volume_name"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app" -> "[root] module.ecs_task_definition.var.awsvpc_enabled"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app" -> "[root] module.ecs_task_definition.var.container_definitions"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app" -> "[root] module.ecs_task_definition.var.cpu"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app" -> "[root] module.ecs_task_definition.var.create"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app" -> "[root] module.ecs_task_definition.var.ecs_task_execution_role_arn"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app" -> "[root] module.ecs_task_definition.var.ecs_taskrole_arn"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app" -> "[root] module.ecs_task_definition.var.host_path_volumes"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app" -> "[root] module.ecs_task_definition.var.launch_type"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app" -> "[root] module.ecs_task_definition.var.memory"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app" -> "[root] module.ecs_task_definition.var.name"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume" -> "[root] module.ecs_task_definition.local.docker_volume_name"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume" -> "[root] module.ecs_task_definition.var.awsvpc_enabled"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume" -> "[root] module.ecs_task_definition.var.container_definitions"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume" -> "[root] module.ecs_task_definition.var.cpu"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume" -> "[root] module.ecs_task_definition.var.create"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume" -> "[root] module.ecs_task_definition.var.ecs_task_execution_role_arn"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume" -> "[root] module.ecs_task_definition.var.ecs_taskrole_arn"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume" -> "[root] module.ecs_task_definition.var.host_path_volumes"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume" -> "[root] module.ecs_task_definition.var.launch_type"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume" -> "[root] module.ecs_task_definition.var.memory"
		"[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume" -> "[root] module.ecs_task_definition.var.name"
		"[root] module.ecs_task_definition.local.docker_volume_name" -> "[root] module.ecs_task_definition.var.docker_volume"
		"[root] module.ecs_task_definition.output.aws_ecs_task_definition_arn" -> "[root] module.ecs_task_definition.aws_ecs_task_definition.app"
		"[root] module.ecs_task_definition.output.aws_ecs_task_definition_arn" -> "[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume"
		"[root] module.ecs_task_definition.output.aws_ecs_task_definition_family" -> "[root] module.ecs_task_definition.aws_ecs_task_definition.app"
		"[root] module.ecs_task_definition.output.aws_ecs_task_definition_family" -> "[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume"
		"[root] module.ecs_task_definition.output.aws_ecs_task_definition_revision" -> "[root] module.ecs_task_definition.aws_ecs_task_definition.app"
		"[root] module.ecs_task_definition.output.aws_ecs_task_definition_revision" -> "[root] module.ecs_task_definition.aws_ecs_task_definition.app_with_docker_volume"
		"[root] module.ecs_task_definition.var.awsvpc_enabled" -> "[root] var.awsvpc_enabled"
		"[root] module.ecs_task_definition.var.container_definitions" -> "[root] module.container_definition.output.json"
		"[root] module.ecs_task_definition.var.cpu" -> "[root] var.container_cpu"
		"[root] module.ecs_task_definition.var.cpu" -> "[root] var.fargate_enabled"
		"[root] module.ecs_task_definition.var.create" -> "[root] var.create"
		"[root] module.ecs_task_definition.var.docker_volume" -> "[root] var.docker_volume"
		"[root] module.ecs_task_definition.var.ecs_task_execution_role_arn" -> "[root] module.iam.output.ecs_task_execution_role_arn"
		"[root] module.ecs_task_definition.var.ecs_taskrole_arn" -> "[root] module.iam.output.ecs_taskrole_arn"
		"[root] module.ecs_task_definition.var.host_path_volumes" -> "[root] var.host_path_volumes"
		"[root] module.ecs_task_definition.var.launch_type" -> "[root] local.launch_type"
		"[root] module.ecs_task_definition.var.memory" -> "[root] var.container_memory"
		"[root] module.ecs_task_definition.var.memory" -> "[root] var.fargate_enabled"
		"[root] module.ecs_task_definition.var.name" -> "[root] local.ecs_cluster_name"
		"[root] module.ecs_task_definition.var.name" -> "[root] var.name"
		"[root] module.ecs_task_definition_selector.data.aws_ecs_container_definition.current" -> "[root] module.ecs_task_definition_selector.var.aws_ecs_task_definition_family"
		"[root] module.ecs_task_definition_selector.data.aws_ecs_container_definition.current" -> "[root] module.ecs_task_definition_selector.var.aws_ecs_task_definition_revision"
		"[root] module.ecs_task_definition_selector.data.aws_ecs_container_definition.current" -> "[root] module.ecs_task_definition_selector.var.create"
		"[root] module.ecs_task_definition_selector.data.aws_ecs_container_definition.current" -> "[root] module.ecs_task_definition_selector.var.ecs_container_name"
		"[root] module.ecs_task_definition_selector.local.cpu" -> "[root] module.ecs_task_definition_selector.data.aws_ecs_container_definition.current"
		"[root] module.ecs_task_definition_selector.local.docker_labels" -> "[root] module.ecs_task_definition_selector.data.aws_ecs_container_definition.current"
		"[root] module.ecs_task_definition_selector.local.environment" -> "[root] module.ecs_task_definition_selector.data.aws_ecs_container_definition.current"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.local.cpu"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.local.docker_labels"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.local.environment"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.local.image"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.local.memory"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.local.memory_reservation"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_cpu"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_docker_label_hash"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_environment_json"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_image"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_memory"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_memory_reservation"
		"[root] module.ecs_task_definition_selector.local.has_changed" -> "[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_secrets_hash"
		"[root] module.ecs_task_definition_selector.local.image" -> "[root] module.ecs_task_definition_selector.data.aws_ecs_container_definition.current"
		"[root] module.ecs_task_definition_selector.local.memory" -> "[root] module.ecs_task_definition_selector.data.aws_ecs_container_definition.current"
		"[root] module.ecs_task_definition_selector.local.memory_reservation" -> "[root] module.ecs_task_definition_selector.data.aws_ecs_container_definition.current"
		"[root] module.ecs_task_definition_selector.local.revision" -> "[root] module.ecs_task_definition_selector.local.has_changed"
		"[root] module.ecs_task_definition_selector.local.revision" -> "[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_revision"
		"[root] module.ecs_task_definition_selector.local.task_definition" -> "[root] module.ecs_task_definition_selector.local.revision"
		"[root] module.ecs_task_definition_selector.output.has_changed" -> "[root] module.ecs_task_definition_selector.local.has_changed"
		"[root] module.ecs_task_definition_selector.output.selected_task_definition_for_deployment" -> "[root] module.ecs_task_definition_selector.local.task_definition"
		"[root] module.ecs_task_definition_selector.var.aws_ecs_task_definition_family" -> "[root] module.ecs_task_definition.output.aws_ecs_task_definition_family"
		"[root] module.ecs_task_definition_selector.var.aws_ecs_task_definition_revision" -> "[root] module.ecs_task_definition.output.aws_ecs_task_definition_revision"
		"[root] module.ecs_task_definition_selector.var.create" -> "[root] var.create"
		"[root] module.ecs_task_definition_selector.var.ecs_container_name" -> "[root] var.container_name"
		"[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_cpu" -> "[root] module.live_task_lookup.output.cpu"
		"[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_docker_label_hash" -> "[root] module.live_task_lookup.output.docker_label_hash"
		"[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_environment_json" -> "[root] module.live_task_lookup.output.environment_json"
		"[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_image" -> "[root] module.live_task_lookup.output.image"
		"[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_memory" -> "[root] module.live_task_lookup.output.memory"
		"[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_memory_reservation" -> "[root] module.live_task_lookup.output.memory_reservation"
		"[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_revision" -> "[root] module.live_task_lookup.output.revision"
		"[root] module.ecs_task_definition_selector.var.live_aws_ecs_task_definition_secrets_hash" -> "[root] module.live_task_lookup.output.secrets_hash"
		"[root] module.iam.aws_iam_role.ecs_task_execution_role" -> "[root] module.iam.data.aws_iam_policy_document.ecs_task_assume_role"
		"[root] module.iam.aws_iam_role.ecs_task_execution_role" -> "[root] module.iam.var.container_secrets_enabled"
		"[root] module.iam.aws_iam_role.ecs_task_execution_role" -> "[root] module.iam.var.fargate_enabled"
		"[root] module.iam.aws_iam_role.ecs_task_execution_role" -> "[root] module.iam.var.name"
		"[root] module.iam.aws_iam_role.ecs_tasks_role" -> "[root] module.iam.data.aws_iam_policy_document.ecs_task_assume_role"
		"[root] module.iam.aws_iam_role.ecs_tasks_role" -> "[root] module.iam.var.name"
		"[root] module.iam.aws_iam_role.lambda_ecs_task_scheduler" -> "[root] module.iam.data.aws_iam_policy_document.lambda_trust_policy"
		"[root] module.iam.aws_iam_role.lambda_ecs_task_scheduler" -> "[root] module.iam.var.create"
		"[root] module.iam.aws_iam_role.lambda_ecs_task_scheduler" -> "[root] module.iam.var.name"
		"[root] module.iam.aws_iam_role.lambda_lookup" -> "[root] module.iam.data.aws_iam_policy_document.lambda_trust_policy"
		"[root] module.iam.aws_iam_role.lambda_lookup" -> "[root] module.iam.var.create"
		"[root] module.iam.aws_iam_role.lambda_lookup" -> "[root] module.iam.var.name"
		"[root] module.iam.aws_iam_role.scheduled_task_cloudwatch" -> "[root] module.iam.data.aws_iam_policy_document.scheduled-task-cloudwatch-assume-role-policy"
		"[root] module.iam.aws_iam_role.scheduled_task_cloudwatch" -> "[root] module.iam.var.is_scheduled_task"
		"[root] module.iam.aws_iam_role.scheduled_task_cloudwatch" -> "[root] module.iam.var.name"
		"[root] module.iam.aws_iam_role_policy.kms_permissions" -> "[root] module.iam.aws_iam_role.ecs_tasks_role"
		"[root] module.iam.aws_iam_role_policy.kms_permissions" -> "[root] module.iam.data.aws_iam_policy_document.kms_permissions"
		"[root] module.iam.aws_iam_role_policy.lambda_ecs_task_scheduler_policy" -> "[root] module.iam.aws_iam_role.lambda_ecs_task_scheduler"
		"[root] module.iam.aws_iam_role_policy.lambda_ecs_task_scheduler_policy" -> "[root] module.iam.data.aws_iam_policy_document.lambda_ecs_task_scheduler_policy"
		"[root] module.iam.aws_iam_role_policy.lambda_lookup_policy" -> "[root] module.iam.aws_iam_role.lambda_lookup"
		"[root] module.iam.aws_iam_role_policy.lambda_lookup_policy" -> "[root] module.iam.data.aws_iam_policy_document.lambda_lookup_policy"
		"[root] module.iam.aws_iam_role_policy.s3_ro_permissions" -> "[root] module.iam.aws_iam_role.ecs_tasks_role"
		"[root] module.iam.aws_iam_role_policy.s3_ro_permissions" -> "[root] module.iam.data.aws_iam_policy_document.s3_ro_permissions"
		"[root] module.iam.aws_iam_role_policy.s3_rw_permissions" -> "[root] module.iam.aws_iam_role.ecs_tasks_role"
		"[root] module.iam.aws_iam_role_policy.s3_rw_permissions" -> "[root] module.iam.data.aws_iam_policy_document.s3_rw_permissions"
		"[root] module.iam.aws_iam_role_policy.scheduled_task_cloudwatch_policy" -> "[root] module.iam.aws_iam_role.scheduled_task_cloudwatch"
		"[root] module.iam.aws_iam_role_policy.scheduled_task_cloudwatch_policy" -> "[root] module.iam.data.aws_iam_policy_document.scheduled_task_cloudwatch_policy"
		"[root] module.iam.aws_iam_role_policy.ssm_permissions" -> "[root] module.iam.aws_iam_role.ecs_tasks_role"
		"[root] module.iam.aws_iam_role_policy.ssm_permissions" -> "[root] module.iam.data.aws_iam_policy_document.ssm_permissions"
		"[root] module.iam.aws_iam_role_policy.ssm_permissions_execution" -> "[root] module.iam.aws_iam_role.ecs_task_execution_role"
		"[root] module.iam.aws_iam_role_policy.ssm_permissions_execution" -> "[root] module.iam.data.aws_iam_policy_document.ssm_permissions"
		"[root] module.iam.aws_iam_role_policy_attachment.ecs_tasks_execution_role" -> "[root] module.iam.aws_iam_role.ecs_task_execution_role"
		"[root] module.iam.data.aws_caller_identity.current" -> "[root] module.iam.var.create"
		"[root] module.iam.data.aws_caller_identity.current" -> "[root] provider.aws"
		"[root] module.iam.data.aws_iam_policy_document.ecs_task_assume_role" -> "[root] module.iam.var.create"
		"[root] module.iam.data.aws_iam_policy_document.ecs_task_assume_role" -> "[root] provider.aws"
		"[root] module.iam.data.aws_iam_policy_document.kms_permissions" -> "[root] module.iam.var.create"
		"[root] module.iam.data.aws_iam_policy_document.kms_permissions" -> "[root] module.iam.var.kms_enabled"
		"[root] module.iam.data.aws_iam_policy_document.kms_permissions" -> "[root] module.iam.var.kms_keys"
		"[root] module.iam.data.aws_iam_policy_document.kms_permissions" -> "[root] provider.aws"
		"[root] module.iam.data.aws_iam_policy_document.lambda_ecs_task_scheduler_policy" -> "[root] module.iam.data.aws_caller_identity.current"
		"[root] module.iam.data.aws_iam_policy_document.lambda_ecs_task_scheduler_policy" -> "[root] module.iam.var.ecs_cluster_id"
		"[root] module.iam.data.aws_iam_policy_document.lambda_ecs_task_scheduler_policy" -> "[root] module.iam.var.name"
		"[root] module.iam.data.aws_iam_policy_document.lambda_ecs_task_scheduler_policy" -> "[root] module.iam.var.region"
		"[root] module.iam.data.aws_iam_policy_document.lambda_lookup_policy" -> "[root] module.iam.data.aws_caller_identity.current"
		"[root] module.iam.data.aws_iam_policy_document.lambda_lookup_policy" -> "[root] module.iam.var.name"
		"[root] module.iam.data.aws_iam_policy_document.lambda_lookup_policy" -> "[root] module.iam.var.region"
		"[root] module.iam.data.aws_iam_policy_document.lambda_trust_policy" -> "[root] provider.aws"
		"[root] module.iam.data.aws_iam_policy_document.s3_ro_permissions" -> "[root] module.iam.var.create"
		"[root] module.iam.data.aws_iam_policy_document.s3_ro_permissions" -> "[root] module.iam.var.s3_ro_paths"
		"[root] module.iam.data.aws_iam_policy_document.s3_ro_permissions" -> "[root] provider.aws"
		"[root] module.iam.data.aws_iam_policy_document.s3_rw_permissions" -> "[root] module.iam.var.create"
		"[root] module.iam.data.aws_iam_policy_document.s3_rw_permissions" -> "[root] module.iam.var.s3_rw_paths"
		"[root] module.iam.data.aws_iam_policy_document.s3_rw_permissions" -> "[root] provider.aws"
		"[root] module.iam.data.aws_iam_policy_document.scheduled-task-cloudwatch-assume-role-policy" -> "[root] module.iam.var.create"
		"[root] module.iam.data.aws_iam_policy_document.scheduled-task-cloudwatch-assume-role-policy" -> "[root] provider.aws"
		"[root] module.iam.data.aws_iam_policy_document.scheduled_task_cloudwatch_policy" -> "[root] module.iam.var.create"
		"[root] module.iam.data.aws_iam_policy_document.scheduled_task_cloudwatch_policy" -> "[root] provider.aws"
		"[root] module.iam.data.aws_iam_policy_document.ssm_permissions" -> "[root] module.iam.data.aws_caller_identity.current"
		"[root] module.iam.data.aws_iam_policy_document.ssm_permissions" -> "[root] module.iam.var.container_secrets_enabled"
		"[root] module.iam.data.aws_iam_policy_document.ssm_permissions" -> "[root] module.iam.var.region"
		"[root] module.iam.data.aws_iam_policy_document.ssm_permissions" -> "[root] module.iam.var.ssm_enabled"
		"[root] module.iam.data.aws_iam_policy_document.ssm_permissions" -> "[root] module.iam.var.ssm_paths"
		"[root] module.iam.output.ecs_task_execution_role_arn" -> "[root] module.iam.aws_iam_role.ecs_task_execution_role"
		"[root] module.iam.output.ecs_task_execution_role_name" -> "[root] module.iam.aws_iam_role.ecs_task_execution_role"
		"[root] module.iam.output.ecs_taskrole_arn" -> "[root] module.iam.aws_iam_role.ecs_tasks_role"
		"[root] module.iam.output.ecs_taskrole_name" -> "[root] module.iam.aws_iam_role.ecs_tasks_role"
		"[root] module.iam.output.lambda_ecs_task_scheduler_role_arn" -> "[root] module.iam.aws_iam_role.lambda_ecs_task_scheduler"
		"[root] module.iam.output.lambda_lookup_role_arn" -> "[root] module.iam.aws_iam_role.lambda_lookup"
		"[root] module.iam.output.lambda_lookup_role_name" -> "[root] module.iam.aws_iam_role.lambda_lookup"
		"[root] module.iam.output.lambda_lookup_role_policy_id" -> "[root] module.iam.aws_iam_role_policy.lambda_lookup_policy"
		"[root] module.iam.output.scheduled_task_cloudwatch_role_arn" -> "[root] module.iam.aws_iam_role.scheduled_task_cloudwatch"
		"[root] module.iam.var.container_secrets_enabled" -> "[root] var.container_secrets_enabled"
		"[root] module.iam.var.create" -> "[root] var.create"
		"[root] module.iam.var.ecs_cluster_id" -> "[root] var.ecs_cluster_id"
		"[root] module.iam.var.fargate_enabled" -> "[root] var.fargate_enabled"
		"[root] module.iam.var.is_scheduled_task" -> "[root] var.is_scheduled_task"
		"[root] module.iam.var.kms_enabled" -> "[root] var.kms_enabled"
		"[root] module.iam.var.kms_keys" -> "[root] var.kms_keys"
		"[root] module.iam.var.name" -> "[root] local.ecs_cluster_name"
		"[root] module.iam.var.name" -> "[root] var.name"
		"[root] module.iam.var.region" -> "[root] var.region"
		"[root] module.iam.var.s3_ro_paths" -> "[root] var.s3_ro_paths"
		"[root] module.iam.var.s3_rw_paths" -> "[root] var.s3_rw_paths"
		"[root] module.iam.var.ssm_enabled" -> "[root] var.ssm_enabled"
		"[root] module.iam.var.ssm_paths" -> "[root] var.ssm_paths"
		"[root] module.lambda_ecs_task_scheduler.aws_cloudwatch_event_rule.schedule_expressions" -> "[root] module.lambda_ecs_task_scheduler.local.identifier"
		"[root] module.lambda_ecs_task_scheduler.aws_cloudwatch_event_rule.schedule_expressions" -> "[root] module.lambda_ecs_task_scheduler.var.ecs_cron_tasks"
		"[root] module.lambda_ecs_task_scheduler.aws_cloudwatch_event_target.call_task_runner_scheduler" -> "[root] module.lambda_ecs_task_scheduler.aws_cloudwatch_event_rule.schedule_expressions"
		"[root] module.lambda_ecs_task_scheduler.aws_cloudwatch_event_target.call_task_runner_scheduler" -> "[root] module.lambda_ecs_task_scheduler.aws_lambda_function.lambda_task_runner"
		"[root] module.lambda_ecs_task_scheduler.aws_cloudwatch_event_target.call_task_runner_scheduler" -> "[root] module.lambda_ecs_task_scheduler.data.template_file.task_defs"
		"[root] module.lambda_ecs_task_scheduler.aws_lambda_function.lambda_task_runner" -> "[root] module.lambda_ecs_task_scheduler.data.archive_file.ecs_task_scheduler_zip"
		"[root] module.lambda_ecs_task_scheduler.aws_lambda_function.lambda_task_runner" -> "[root] module.lambda_ecs_task_scheduler.local.identifier"
		"[root] module.lambda_ecs_task_scheduler.aws_lambda_function.lambda_task_runner" -> "[root] module.lambda_ecs_task_scheduler.var.create"
		"[root] module.lambda_ecs_task_scheduler.aws_lambda_function.lambda_task_runner" -> "[root] module.lambda_ecs_task_scheduler.var.lambda_ecs_task_scheduler_role_arn"
		"[root] module.lambda_ecs_task_scheduler.aws_lambda_function.lambda_task_runner" -> "[root] module.lambda_ecs_task_scheduler.var.tags"
		"[root] module.lambda_ecs_task_scheduler.aws_lambda_permission.allow_cloudwatch_to_call_task_runner" -> "[root] module.lambda_ecs_task_scheduler.aws_cloudwatch_event_rule.schedule_expressions"
		"[root] module.lambda_ecs_task_scheduler.aws_lambda_permission.allow_cloudwatch_to_call_task_runner" -> "[root] module.lambda_ecs_task_scheduler.aws_lambda_function.lambda_task_runner"
		"[root] module.lambda_ecs_task_scheduler.data.archive_file.ecs_task_scheduler_zip" -> "[root] provider.archive"
		"[root] module.lambda_ecs_task_scheduler.data.template_file.task_defs" -> "[root] module.lambda_ecs_task_scheduler.local.lambda_params"
		"[root] module.lambda_ecs_task_scheduler.data.template_file.task_defs" -> "[root] module.lambda_ecs_task_scheduler.var.container_name"
		"[root] module.lambda_ecs_task_scheduler.data.template_file.task_defs" -> "[root] module.lambda_ecs_task_scheduler.var.create"
		"[root] module.lambda_ecs_task_scheduler.data.template_file.task_defs" -> "[root] module.lambda_ecs_task_scheduler.var.ecs_cluster_id"
		"[root] module.lambda_ecs_task_scheduler.data.template_file.task_defs" -> "[root] module.lambda_ecs_task_scheduler.var.ecs_cron_tasks"
		"[root] module.lambda_ecs_task_scheduler.data.template_file.task_defs" -> "[root] module.lambda_ecs_task_scheduler.var.ecs_service_name"
		"[root] module.lambda_ecs_task_scheduler.local.identifier" -> "[root] module.lambda_ecs_task_scheduler.var.ecs_cluster_id"
		"[root] module.lambda_ecs_task_scheduler.local.identifier" -> "[root] module.lambda_ecs_task_scheduler.var.ecs_service_name"
		"[root] module.lambda_ecs_task_scheduler.var.container_name" -> "[root] var.container_name"
		"[root] module.lambda_ecs_task_scheduler.var.create" -> "[root] var.create"
		"[root] module.lambda_ecs_task_scheduler.var.create" -> "[root] var.ecs_cron_tasks"
		"[root] module.lambda_ecs_task_scheduler.var.create" -> "[root] var.is_scheduled_task"
		"[root] module.lambda_ecs_task_scheduler.var.ecs_cluster_id" -> "[root] var.ecs_cluster_id"
		"[root] module.lambda_ecs_task_scheduler.var.ecs_cron_tasks" -> "[root] var.ecs_cron_tasks"
		"[root] module.lambda_ecs_task_scheduler.var.ecs_service_name" -> "[root] module.ecs_service.output.ecs_service_name"
		"[root] module.lambda_ecs_task_scheduler.var.lambda_ecs_task_scheduler_role_arn" -> "[root] module.iam.output.lambda_ecs_task_scheduler_role_arn"
		"[root] module.live_task_lookup.aws_lambda_function.lambda_lookup" -> "[root] module.live_task_lookup.data.archive_file.lookup_zip"
		"[root] module.live_task_lookup.aws_lambda_function.lambda_lookup" -> "[root] module.live_task_lookup.null_resource.force_policy_dependency"
		"[root] module.live_task_lookup.aws_lambda_function.lambda_lookup" -> "[root] module.live_task_lookup.var.create"
		"[root] module.live_task_lookup.aws_lambda_function.lambda_lookup" -> "[root] module.live_task_lookup.var.ecs_cluster_id"
		"[root] module.live_task_lookup.aws_lambda_function.lambda_lookup" -> "[root] module.live_task_lookup.var.ecs_service_name"
		"[root] module.live_task_lookup.aws_lambda_function.lambda_lookup" -> "[root] module.live_task_lookup.var.lambda_lookup_role_arn"
		"[root] module.live_task_lookup.aws_lambda_function.lambda_lookup" -> "[root] module.live_task_lookup.var.tags"
		"[root] module.live_task_lookup.data.archive_file.lookup_zip" -> "[root] provider.archive"
		"[root] module.live_task_lookup.data.aws_ecs_container_definition.lookup" -> "[root] module.live_task_lookup.data.aws_ecs_service.lookup"
		"[root] module.live_task_lookup.data.aws_ecs_container_definition.lookup" -> "[root] module.live_task_lookup.var.container_name"
		"[root] module.live_task_lookup.data.aws_ecs_service.lookup" -> "[root] module.live_task_lookup.var.create"
		"[root] module.live_task_lookup.data.aws_ecs_service.lookup" -> "[root] module.live_task_lookup.var.ecs_cluster_id"
		"[root] module.live_task_lookup.data.aws_ecs_service.lookup" -> "[root] module.live_task_lookup.var.ecs_service_name"
		"[root] module.live_task_lookup.data.aws_ecs_service.lookup" -> "[root] module.live_task_lookup.var.lookup_type"
		"[root] module.live_task_lookup.data.aws_ecs_service.lookup" -> "[root] provider.aws"
		"[root] module.live_task_lookup.data.aws_ecs_task_definition.lookup" -> "[root] module.live_task_lookup.data.aws_ecs_service.lookup"
		"[root] module.live_task_lookup.data.aws_lambda_invocation.lambda_lookup" -> "[root] module.live_task_lookup.aws_lambda_function.lambda_lookup"
		"[root] module.live_task_lookup.data.aws_lambda_invocation.lambda_lookup" -> "[root] module.live_task_lookup.var.container_name"
		"[root] module.live_task_lookup.data.aws_lambda_invocation.lambda_lookup" -> "[root] module.live_task_lookup.var.lookup_type"
		"[root] module.live_task_lookup.local.dockerlabels_coalesce" -> "[root] module.live_task_lookup.data.aws_ecs_container_definition.lookup"
		"[root] module.live_task_lookup.local.environment_coalesce" -> "[root] module.live_task_lookup.data.aws_ecs_container_definition.lookup"
		"[root] module.live_task_lookup.local.lambda_lookup" -> "[root] module.live_task_lookup.local.safe_lambda_lookup"
		"[root] module.live_task_lookup.local.safe_lambda_lookup" -> "[root] module.live_task_lookup.data.aws_lambda_invocation.lambda_lookup"
		"[root] module.live_task_lookup.local.safe_lambda_lookup" -> "[root] module.live_task_lookup.local.empty_lookup"
		"[root] module.live_task_lookup.local.test_lookup_type" -> "[root] module.live_task_lookup.var.allowed_lookup_types"
		"[root] module.live_task_lookup.local.test_lookup_type" -> "[root] module.live_task_lookup.var.lookup_type"
		"[root] module.live_task_lookup.null_resource.force_policy_dependency" -> "[root] module.live_task_lookup.var.lambda_lookup_role_policy_id"
		"[root] module.live_task_lookup.null_resource.force_policy_dependency" -> "[root] provider.null"
		"[root] module.live_task_lookup.output.cpu" -> "[root] module.live_task_lookup.data.aws_ecs_container_definition.lookup"
		"[root] module.live_task_lookup.output.cpu" -> "[root] module.live_task_lookup.local.lambda_lookup"
		"[root] module.live_task_lookup.output.docker_label_hash" -> "[root] module.live_task_lookup.local.dockerlabels_coalesce"
		"[root] module.live_task_lookup.output.docker_label_hash" -> "[root] module.live_task_lookup.local.lambda_lookup"
		"[root] module.live_task_lookup.output.environment_json" -> "[root] module.live_task_lookup.local.environment_coalesce"
		"[root] module.live_task_lookup.output.environment_json" -> "[root] module.live_task_lookup.local.lambda_lookup"
		"[root] module.live_task_lookup.output.image" -> "[root] module.live_task_lookup.data.aws_ecs_container_definition.lookup"
		"[root] module.live_task_lookup.output.image" -> "[root] module.live_task_lookup.local.lambda_lookup"
		"[root] module.live_task_lookup.output.memory" -> "[root] module.live_task_lookup.data.aws_ecs_container_definition.lookup"
		"[root] module.live_task_lookup.output.memory" -> "[root] module.live_task_lookup.local.lambda_lookup"
		"[root] module.live_task_lookup.output.memory_reservation" -> "[root] module.live_task_lookup.data.aws_ecs_container_definition.lookup"
		"[root] module.live_task_lookup.output.memory_reservation" -> "[root] module.live_task_lookup.local.lambda_lookup"
		"[root] module.live_task_lookup.output.revision" -> "[root] module.live_task_lookup.data.aws_ecs_task_definition.lookup"
		"[root] module.live_task_lookup.output.revision" -> "[root] module.live_task_lookup.local.lambda_lookup"
		"[root] module.live_task_lookup.output.secrets_hash" -> "[root] module.live_task_lookup.local.dockerlabels_coalesce"
		"[root] module.live_task_lookup.output.secrets_hash" -> "[root] module.live_task_lookup.local.lambda_lookup"
		"[root] module.live_task_lookup.var.container_name" -> "[root] var.container_name"
		"[root] module.live_task_lookup.var.create" -> "[root] var.create"
		"[root] module.live_task_lookup.var.ecs_cluster_id" -> "[root] var.ecs_cluster_id"
		"[root] module.live_task_lookup.var.ecs_service_name" -> "[root] var.name"
		"[root] module.live_task_lookup.var.lambda_lookup_role_arn" -> "[root] module.iam.output.lambda_lookup_role_arn"
		"[root] module.live_task_lookup.var.lambda_lookup_role_policy_id" -> "[root] module.iam.output.lambda_lookup_role_policy_id"
		"[root] module.live_task_lookup.var.lookup_type" -> "[root] var.live_task_lookup_type"
		"[root] output.aws_ecs_task_definition_arn" -> "[root] module.ecs_task_definition_selector.output.selected_task_definition_for_deployment"
		"[root] output.aws_ecs_task_definition_family" -> "[root] module.ecs_task_definition.output.aws_ecs_task_definition_family"
		"[root] output.ecs_taskrole_arn" -> "[root] module.iam.output.ecs_taskrole_arn"
		"[root] output.ecs_taskrole_name" -> "[root] module.iam.output.ecs_taskrole_name"
		"[root] output.has_changed" -> "[root] module.ecs_task_definition_selector.output.has_changed"
		"[root] output.lb_target_group_arn" -> "[root] module.alb_handling.output.lb_target_group_arn"
		"[root] output.task_execution_role_arn" -> "[root] module.iam.output.ecs_task_execution_role_arn"
		"[root] output.task_execution_role_name" -> "[root] module.iam.output.ecs_task_execution_role_name"
		"[root] provider.archive (close)" -> "[root] module.lambda_ecs_task_scheduler.data.archive_file.ecs_task_scheduler_zip"
		"[root] provider.archive (close)" -> "[root] module.live_task_lookup.data.archive_file.lookup_zip"
		"[root] provider.aws (close)" -> "[root] aws_cloudwatch_event_target.scheduled_task"
		"[root] provider.aws (close)" -> "[root] module.alb_handling.aws_lb_listener.nlb_listener"
		"[root] provider.aws (close)" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_custom_listen_host_redirect_to_https"
		"[root] provider.aws (close)" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_redirect_to_https"
		"[root] provider.aws (close)" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl"
		"[root] provider.aws (close)" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_cognito_auth"
		"[root] provider.aws (close)" -> "[root] module.alb_handling.aws_lb_listener_rule.host_based_routing_ssl_custom_listen_host"
		"[root] provider.aws (close)" -> "[root] module.ecs_autoscaling.aws_cloudwatch_metric_alarm.alarm"
		"[root] provider.aws (close)" -> "[root] module.ecs_service.aws_ecs_service.app_with_service_registry"
		"[root] provider.aws (close)" -> "[root] module.iam.aws_iam_role_policy.kms_permissions"
		"[root] provider.aws (close)" -> "[root] module.iam.aws_iam_role_policy.lambda_ecs_task_scheduler_policy"
		"[root] provider.aws (close)" -> "[root] module.iam.aws_iam_role_policy.s3_ro_permissions"
		"[root] provider.aws (close)" -> "[root] module.iam.aws_iam_role_policy.s3_rw_permissions"
		"[root] provider.aws (close)" -> "[root] module.iam.aws_iam_role_policy.scheduled_task_cloudwatch_policy"
		"[root] provider.aws (close)" -> "[root] module.iam.aws_iam_role_policy.ssm_permissions"
		"[root] provider.aws (close)" -> "[root] module.iam.aws_iam_role_policy.ssm_permissions_execution"
		"[root] provider.aws (close)" -> "[root] module.iam.aws_iam_role_policy_attachment.ecs_tasks_execution_role"
		"[root] provider.aws (close)" -> "[root] module.lambda_ecs_task_scheduler.aws_cloudwatch_event_target.call_task_runner_scheduler"
		"[root] provider.aws (close)" -> "[root] module.lambda_ecs_task_scheduler.aws_lambda_permission.allow_cloudwatch_to_call_task_runner"
		"[root] provider.null (close)" -> "[root] module.container_definition.null_resource.envvars_as_list_of_maps"
		"[root] provider.null (close)" -> "[root] module.container_definition.null_resource.secrets_as_list_of_maps"
		"[root] provider.null (close)" -> "[root] module.ecs_service.null_resource.aws_lb_listener_rules"
		"[root] provider.null (close)" -> "[root] module.live_task_lookup.null_resource.force_policy_dependency"
		"[root] provider.template (close)" -> "[root] module.lambda_ecs_task_scheduler.data.template_file.task_defs"
		"[root] root" -> "[root] meta.count-boundary (count boundary fixup)"
		"[root] root" -> "[root] provider.archive (close)"
		"[root] root" -> "[root] provider.aws (close)"
		"[root] root" -> "[root] provider.null (close)"
		"[root] root" -> "[root] provider.template (close)"
	}
}

